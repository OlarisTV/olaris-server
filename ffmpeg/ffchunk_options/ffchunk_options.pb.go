// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ffchunk_options.proto

package ffchunk_options

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FFChunkOptions struct {
	InputFile            string   `protobuf:"bytes,1,opt,name=input_file,json=inputFile,proto3" json:"input_file,omitempty"`
	OutputDir            string   `protobuf:"bytes,2,opt,name=output_dir,json=outputDir,proto3" json:"output_dir,omitempty"`
	StartDts             int64    `protobuf:"varint,3,opt,name=start_dts,json=startDts,proto3" json:"start_dts,omitempty"`
	EndDts               int64    `protobuf:"varint,4,opt,name=end_dts,json=endDts,proto3" json:"end_dts,omitempty"`
	StreamIndex          int64    `protobuf:"varint,5,opt,name=stream_index,json=streamIndex,proto3" json:"stream_index,omitempty"`
	SegmentStartIndex    int64    `protobuf:"varint,6,opt,name=segment_start_index,json=segmentStartIndex,proto3" json:"segment_start_index,omitempty"`
	SplitDts             []int64  `protobuf:"varint,7,rep,packed,name=split_dts,json=splitDts,proto3" json:"split_dts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FFChunkOptions) Reset()         { *m = FFChunkOptions{} }
func (m *FFChunkOptions) String() string { return proto.CompactTextString(m) }
func (*FFChunkOptions) ProtoMessage()    {}
func (*FFChunkOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffchunk_options_94d142480bd23246, []int{0}
}
func (m *FFChunkOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FFChunkOptions.Unmarshal(m, b)
}
func (m *FFChunkOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FFChunkOptions.Marshal(b, m, deterministic)
}
func (dst *FFChunkOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FFChunkOptions.Merge(dst, src)
}
func (m *FFChunkOptions) XXX_Size() int {
	return xxx_messageInfo_FFChunkOptions.Size(m)
}
func (m *FFChunkOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FFChunkOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FFChunkOptions proto.InternalMessageInfo

func (m *FFChunkOptions) GetInputFile() string {
	if m != nil {
		return m.InputFile
	}
	return ""
}

func (m *FFChunkOptions) GetOutputDir() string {
	if m != nil {
		return m.OutputDir
	}
	return ""
}

func (m *FFChunkOptions) GetStartDts() int64 {
	if m != nil {
		return m.StartDts
	}
	return 0
}

func (m *FFChunkOptions) GetEndDts() int64 {
	if m != nil {
		return m.EndDts
	}
	return 0
}

func (m *FFChunkOptions) GetStreamIndex() int64 {
	if m != nil {
		return m.StreamIndex
	}
	return 0
}

func (m *FFChunkOptions) GetSegmentStartIndex() int64 {
	if m != nil {
		return m.SegmentStartIndex
	}
	return 0
}

func (m *FFChunkOptions) GetSplitDts() []int64 {
	if m != nil {
		return m.SplitDts
	}
	return nil
}

func init() {
	proto.RegisterType((*FFChunkOptions)(nil), "FFChunkOptions")
}

func init() {
	proto.RegisterFile("ffchunk_options.proto", fileDescriptor_ffchunk_options_94d142480bd23246)
}

var fileDescriptor_ffchunk_options_94d142480bd23246 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x2c, 0xcf, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0xc6, 0x71, 0x6a, 0xb5, 0x6b, 0x47, 0x11, 0xac, 0x88, 0x05, 0x11, 0xaa, 0xa7, 0x3d, 0xed,
	0xc5, 0x47, 0xb0, 0x14, 0x3c, 0x09, 0xeb, 0x03, 0x84, 0xd5, 0x4c, 0x75, 0xb0, 0x4d, 0x4a, 0x32,
	0x05, 0x1f, 0xdc, 0x07, 0x90, 0x99, 0xd9, 0xeb, 0xff, 0x37, 0x90, 0x2f, 0x70, 0x3b, 0x8e, 0x9f,
	0xdf, 0x6b, 0xf8, 0x71, 0x71, 0x61, 0x8a, 0x21, 0xef, 0x96, 0x14, 0x39, 0x3e, 0xfd, 0x15, 0x70,
	0x35, 0x0c, 0x2f, 0x22, 0x6f, 0x06, 0xcd, 0x03, 0x00, 0x85, 0x65, 0x65, 0x37, 0xd2, 0x84, 0x6d,
	0xd1, 0x15, 0xdb, 0x7a, 0x5f, 0x6b, 0x19, 0x68, 0x42, 0xe1, 0xb8, 0xb2, 0xb8, 0xa7, 0xd4, 0x9e,
	0x18, 0x5b, 0xe9, 0x29, 0x35, 0xf7, 0x50, 0x67, 0x3e, 0x24, 0x76, 0x9e, 0x73, 0x5b, 0x76, 0xc5,
	0xb6, 0xdc, 0x9f, 0x6b, 0xe8, 0x39, 0x37, 0x77, 0xb0, 0xc1, 0xe0, 0x95, 0x4e, 0x95, 0x2a, 0x0c,
	0x5e, 0xe0, 0x11, 0x2e, 0x33, 0x27, 0x3c, 0xcc, 0x8e, 0x82, 0xc7, 0xdf, 0xf6, 0x4c, 0xf5, 0xc2,
	0xda, 0xab, 0xa4, 0x66, 0x07, 0x37, 0x19, 0xbf, 0x66, 0x0c, 0xec, 0xec, 0x01, 0xbb, 0xac, 0xf4,
	0xf2, 0xfa, 0x48, 0xef, 0x22, 0x76, 0x2f, 0x43, 0x96, 0x89, 0x6c, 0xc8, 0xa6, 0x2b, 0x75, 0x88,
	0x84, 0x9e, 0xf3, 0x47, 0xa5, 0xbf, 0x7f, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x7c, 0x3d,
	0xd7, 0x16, 0x01, 0x00, 0x00,
}
