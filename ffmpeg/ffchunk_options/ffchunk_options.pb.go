// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ffchunk_options.proto

package ffchunk_options

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FFChunkOptions struct {
	InputFile string `protobuf:"bytes,1,opt,name=input_file,json=inputFile,proto3" json:"input_file,omitempty"`
	OutputDir string `protobuf:"bytes,2,opt,name=output_dir,json=outputDir,proto3" json:"output_dir,omitempty"`
	// Will seek to the first keyframe after start_dts.
	StartDts              int64 `protobuf:"varint,3,opt,name=start_dts,json=startDts,proto3" json:"start_dts,omitempty"`
	EndDts                int64 `protobuf:"varint,4,opt,name=end_dts,json=endDts,proto3" json:"end_dts,omitempty"`
	ContinueUntilKeyframe bool  `protobuf:"varint,9,opt,name=continue_until_keyframe,json=continueUntilKeyframe,proto3" json:"continue_until_keyframe,omitempty"`
	// Average segment duration in stream time_base
	AverageSegmentDuration int64 `protobuf:"varint,10,opt,name=average_segment_duration,json=averageSegmentDuration,proto3" json:"average_segment_duration,omitempty"`
	StreamIndex            int64 `protobuf:"varint,5,opt,name=stream_index,json=streamIndex,proto3" json:"stream_index,omitempty"`
	SegmentStartIndex      int64 `protobuf:"varint,6,opt,name=segment_start_index,json=segmentStartIndex,proto3" json:"segment_start_index,omitempty"`
	// The number of segments to produce, filling up with empty segments if required
	NbSegments           int64    `protobuf:"varint,8,opt,name=nb_segments,json=nbSegments,proto3" json:"nb_segments,omitempty"`
	SplitDts             []int64  `protobuf:"varint,7,rep,packed,name=split_dts,json=splitDts,proto3" json:"split_dts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FFChunkOptions) Reset()         { *m = FFChunkOptions{} }
func (m *FFChunkOptions) String() string { return proto.CompactTextString(m) }
func (*FFChunkOptions) ProtoMessage()    {}
func (*FFChunkOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffchunk_options_c536845ad5f5732b, []int{0}
}
func (m *FFChunkOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FFChunkOptions.Unmarshal(m, b)
}
func (m *FFChunkOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FFChunkOptions.Marshal(b, m, deterministic)
}
func (dst *FFChunkOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FFChunkOptions.Merge(dst, src)
}
func (m *FFChunkOptions) XXX_Size() int {
	return xxx_messageInfo_FFChunkOptions.Size(m)
}
func (m *FFChunkOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FFChunkOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FFChunkOptions proto.InternalMessageInfo

func (m *FFChunkOptions) GetInputFile() string {
	if m != nil {
		return m.InputFile
	}
	return ""
}

func (m *FFChunkOptions) GetOutputDir() string {
	if m != nil {
		return m.OutputDir
	}
	return ""
}

func (m *FFChunkOptions) GetStartDts() int64 {
	if m != nil {
		return m.StartDts
	}
	return 0
}

func (m *FFChunkOptions) GetEndDts() int64 {
	if m != nil {
		return m.EndDts
	}
	return 0
}

func (m *FFChunkOptions) GetContinueUntilKeyframe() bool {
	if m != nil {
		return m.ContinueUntilKeyframe
	}
	return false
}

func (m *FFChunkOptions) GetAverageSegmentDuration() int64 {
	if m != nil {
		return m.AverageSegmentDuration
	}
	return 0
}

func (m *FFChunkOptions) GetStreamIndex() int64 {
	if m != nil {
		return m.StreamIndex
	}
	return 0
}

func (m *FFChunkOptions) GetSegmentStartIndex() int64 {
	if m != nil {
		return m.SegmentStartIndex
	}
	return 0
}

func (m *FFChunkOptions) GetNbSegments() int64 {
	if m != nil {
		return m.NbSegments
	}
	return 0
}

func (m *FFChunkOptions) GetSplitDts() []int64 {
	if m != nil {
		return m.SplitDts
	}
	return nil
}

func init() {
	proto.RegisterType((*FFChunkOptions)(nil), "FFChunkOptions")
}

func init() {
	proto.RegisterFile("ffchunk_options.proto", fileDescriptor_ffchunk_options_c536845ad5f5732b)
}

var fileDescriptor_ffchunk_options_c536845ad5f5732b = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0xd1, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0x06, 0x60, 0xf2, 0xe5, 0xb3, 0x6d, 0xa6, 0x22, 0x18, 0xa9, 0x5d, 0x10, 0x31, 0x7a, 0xea,
	0xa9, 0x17, 0x41, 0xbc, 0x1b, 0x0a, 0xe2, 0x41, 0x68, 0xf1, 0xbc, 0xa4, 0xdd, 0x49, 0x5d, 0x9a,
	0xce, 0x86, 0xdd, 0x59, 0xd1, 0x5f, 0xe0, 0xdf, 0x96, 0xdd, 0x4d, 0xaf, 0xef, 0xf3, 0x92, 0xc9,
	0xcc, 0xc2, 0xac, 0x6d, 0x77, 0x9f, 0x9e, 0x0e, 0xd2, 0xf4, 0xac, 0x0d, 0xb9, 0x65, 0x6f, 0x0d,
	0x9b, 0x87, 0xdf, 0x1c, 0x2e, 0x56, 0xab, 0x97, 0x20, 0xef, 0x09, 0xca, 0x5b, 0x00, 0x4d, 0xbd,
	0x67, 0xd9, 0xea, 0x0e, 0x45, 0x56, 0x65, 0x8b, 0x62, 0x5d, 0xc4, 0x64, 0xa5, 0x3b, 0x0c, 0x6c,
	0x3c, 0x07, 0x57, 0xda, 0x8a, 0x7f, 0x89, 0x53, 0x52, 0x6b, 0x5b, 0xde, 0x40, 0xe1, 0xb8, 0xb1,
	0x2c, 0x15, 0x3b, 0x91, 0x57, 0xd9, 0x22, 0x5f, 0x4f, 0x62, 0x50, 0xb3, 0x2b, 0xe7, 0x30, 0x46,
	0x52, 0x91, 0xfe, 0x47, 0x1a, 0x21, 0xa9, 0x00, 0x4f, 0x30, 0xdf, 0x19, 0x62, 0x4d, 0x1e, 0xa5,
	0x27, 0xd6, 0x9d, 0x3c, 0xe0, 0x4f, 0x6b, 0x9b, 0x23, 0x8a, 0xa2, 0xca, 0x16, 0x93, 0xf5, 0xec,
	0xc4, 0x1f, 0x41, 0xdf, 0x06, 0x2c, 0x9f, 0x41, 0x34, 0x5f, 0x68, 0x9b, 0x3d, 0x4a, 0x87, 0xfb,
	0x23, 0x12, 0x4b, 0xe5, 0x6d, 0x13, 0x16, 0x11, 0x10, 0x27, 0x5c, 0x0f, 0xbe, 0x49, 0x5c, 0x0f,
	0x5a, 0xde, 0xc3, 0xb9, 0x63, 0x8b, 0xcd, 0x51, 0x6a, 0x52, 0xf8, 0x2d, 0xce, 0x62, 0x7b, 0x9a,
	0xb2, 0xd7, 0x10, 0x95, 0x4b, 0xb8, 0x3a, 0x7d, 0x34, 0xad, 0x94, 0x9a, 0xa3, 0xd8, 0xbc, 0x1c,
	0x68, 0x13, 0x24, 0xf5, 0xef, 0x60, 0x4a, 0xdb, 0xd3, 0x7f, 0x38, 0x31, 0x89, 0x3d, 0xa0, 0xed,
	0x30, 0xda, 0xc5, 0xdb, 0xf4, 0x9d, 0x4e, 0xb7, 0x19, 0x57, 0x79, 0xbc, 0x4d, 0x08, 0x6a, 0x76,
	0xdb, 0x51, 0x7c, 0x90, 0xc7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0x31, 0x8a, 0xba, 0xa9,
	0x01, 0x00, 0x00,
}
